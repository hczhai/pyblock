CMAKE_MINIMUM_REQUIRED(VERSION 3.10)

FIND_PROGRAM(CMAKE_C_COMPILER NAMES $ENV{CC} gcc PATHS ENV PATH NO_DEFAULT_PATH)
FIND_PROGRAM(CMAKE_CXX_COMPILER NAMES $ENV{CXX} g++ PATHS ENV PATH NO_DEFAULT_PATH)

# Project Name (must be python module name)

SET(PROJECT_NAME block)
PROJECT(${PROJECT_NAME} VERSION 1.5.3)

# Check LAPACK and BLAS

FIND_PACKAGE(BLAS REQUIRED)
FIND_PACKAGE(LAPACK REQUIRED)

# Check Python3 and Pybind11

SET(Python_ADDITIONAL_VERSIONS 3)
FIND_PACKAGE(PythonInterp)

IF (NOT PYTHONINTERP_FOUND)
    MESSAGE(FATAL_ERROR "Python3 not found.")
ENDIF()

FIND_PACKAGE(PythonLibs)

EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE}-config --extension-suffix
    OUTPUT_VARIABLE PYLIB_SUFFIX OUTPUT_STRIP_TRAILING_WHITESPACE)
EXECUTE_PROCESS(COMMAND ${PYTHON_EXECUTABLE} -c "import pybind11;print(pybind11.get_include())"
    OUTPUT_VARIABLE PYBIND_INCLUDE_DIRS OUTPUT_STRIP_TRAILING_WHITESPACE)

MESSAGE(STATUS "PROJECT_NAME = ${PROJECT_NAME}")
MESSAGE(STATUS "PYTHON_VERSION_MAJOR = ${PYTHON_VERSION_MAJOR}")
MESSAGE(STATUS "PYTHON_VERSION_MINOR = ${PYTHON_VERSION_MINOR}")
MESSAGE(STATUS "PYTHON_LIBRARIES = ${PYTHON_LIBRARIES}")
MESSAGE(STATUS "PYTHON_EXECUTABLE = ${PYTHON_EXECUTABLE}")
MESSAGE(STATUS "PYTHON_EXECUTABLE_HINT = ${PYTHON_EXECUTABLE_HINT}")
MESSAGE(STATUS "PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS}")
MESSAGE(STATUS "PYLIB_SUFFIX = ${PYLIB_SUFFIX}")
MESSAGE(STATUS "PYBIND_INCLUDE_DIRS = ${PYBIND_INCLUDE_DIRS}")

IF (${PYTHON_EXECUTABLE_HINT})
    IF (NOT (${PYTHON_EXECUTABLE_HINT} EQUAL ${PYTHON_EXECUTABLE}))
        MESSAGE(FATAL_ERROR "Python3 used by cmake (${PYTHON_EXECUTABLE}) does not match Python3 \
            used by setup.py (${PYTHON_EXECUTABLE_HINT})!")
    ENDIF()
ENDIF()

SET(CMAKE_CXX_STANDARD 11)
SET(CMAKE_CXX_STANDARD_REQUIRED True)

ADD_SUBDIRECTORY(src/newmat10)

FILE(GLOB_RECURSE SRCS src/array/*.C src/block/*.C src/csf/*.C src/dmrg/*.C src/io/*.C
    src/mps_nevpt/*.C src/npdm/*.C src/numeric/*.C src/response/*.C src/symmetry/*.C
    src/four_index_ops/*.C src/three_index_ops/*.C src/genetic/*.C src/two_index_ops/*.C)

MESSAGE(STATUS "BUILD_LIB = ${BUILD_LIB}")

IF (${BUILD_LIB})
    FILE(GLOB_RECURSE PYBIND_SRCS src/pybind/*.C)
    SET(SRCS ${PYBIND_SRCS} ${SRCS})
    ADD_LIBRARY(${PROJECT_NAME} MODULE ${SRCS})
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES SUFFIX ${PYLIB_SUFFIX} PREFIX "")

    FIND_PACKAGE(Eigen3 REQUIRED)
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${EIGEN3_INCLUDE_DIR})
    MESSAGE(STATUS "EIGEN3_INCLUDE_DIR = ${EIGEN3_INCLUDE_DIR}")

ELSE()
    SET(SRCS ${SRCS} src/main.C)
    ADD_EXECUTABLE(${PROJECT_NAME} ${SRCS})
ENDIF()

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC src
    src/array src/block src/csf src/dmrg src/io src/mps_nevpt src/newmat10 src/npdm src/numeric
    src/response src/symmetry src/four_index_ops src/three_index_ops src/two_index_ops src/genetic)

SET(Boost_USE_MULTITHREADED ON)
FIND_PACKAGE(Boost REQUIRED COMPONENTS system filesystem serialization mpi)
TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC newmat pthread rt)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} PUBLIC ${Boost_LIBRARIES} ${LAPACK_LIBRARIES} ${BLAS_LIBRARIES})

TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PUBLIC -DBOOST_1_56_0 -DBLAS -DUSELAPACK -DFAST_MTP -D_HAS_CBLAS)

IF (${MPI})
    FIND_PACKAGE(MPI REQUIRED)
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
    SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES LINK_FLAGS "${MPI_LINK_FLAGS}")
    TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${MPI_INCLUDE_PATH})
    TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${MPI_CXX_LIBRARIES})
    MESSAGE(STATUS "MPI_COMPILE_FLAGS = ${MPI_COMPILE_FLAGS}")
    MESSAGE(STATUS "MPI_LINK_FLAGS = ${MPI_LINK_FLAGS}")
    MESSAGE(STATUS "MPI_INCLUDE_PATH = ${MPI_INCLUDE_PATH}")
    MESSAGE(STATUS "MPI_CXX_LIBRARIES = ${MPI_CXX_LIBRARIES}")
ELSE()
    TARGET_COMPILE_OPTIONS(${PROJECT_NAME} PUBLIC -DSERIAL)
ENDIF()

MESSAGE(STATUS "SRCS = ${SRCS}")
MESSAGE(STATUS "Boost_VERSION = ${Boost_VERSION}")
MESSAGE(STATUS "Boost_INCLUDE_DIRS = ${Boost_INCLUDE_DIRS}")

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC ${PYTHON_INCLUDE_DIRS} ${PYBIND_INCLUDE_DIRS})
TARGET_COMPILE_OPTIONS(${PROJECT_NAME} BEFORE PUBLIC -O2 -funroll-loops -Werror -Wno-deprecated-declarations)
